;;; init-ui.el --- User interface setup -*- lexical-binding: t -*-

;; This file is not part of GNU Emacs

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Settings about the user interface, either graphical or terminal.

;;; Code:

(require 'cl-lib)
(require 'init-keybinding)
(require 'init-load)


;;;; Setup Modus Themes

(setq-default
 modus-themes-italic-constructs t
 modus-themes-bold-constructs t
 modus-themes-headings '((0 . (rainbow background 1.2))
			 (1 . (rainbow background overline 1.3))
			 (2 . (rainbow background overline 1.2))
			 (3 . (rainbow background overline 1.1))
			 (4 . (rainbow background 1.1))
			 (t . (rainbow background regular 1.0)))
 modus-themes-hl-line '(intense)
 modus-themes-markup '(background intense)
 modus-themes-mixed-fonts t
 modus-themes-region '(accented no-extend)
 modus-themes-org-blocks '(gray-background)
 modus-themes-prompts '(background))

(load-theme 'modus-vivendi 'no-confirm)

(zy/define-key :keymap 'zy/leader-toggle-map
  "t" '("Toggle light/dark" . modus-themes-toggle))


;;;; Mode Lighters

(straight-use-package 'dim)

(zy/defsnip 'snip-dim
  (dim-minor-names
   '((beacon-mode "" beacon)
     (clipetty-mode "" clipetty)
     (eldoc-mode "" eldoc)
     (outline-minor-mode "" outline)
     (page-break-lines-mode "" page-break-lines)
     (smartparens-mode "" smartparens)
     (subword-mode "" subword)
     (which-key-mode "" which-key)
     (yas-minor-mode "" yasnippet))))

(zy/incload-register 'snip-dim :priority 10)


;;;; Setup Fonts

;; Font setter for other character sets

(defvar zy/-fontset-cnt 0
  "Number of fontsets generated by `zy/set-face-charset-font'.")

(defun zy/set-face-charset-font (face frame charset font)
  "Set the font used for character set CHARSET in face FACE.

This function has no effect if `display-graphic-p' returns nil.

FRAME specifies the frame to set in.  When FRAME is nil or
omitted, set it for all existing frames, as well as the default
for new frames.

CHARSET specifies the character set to set font for.  CHARSET
could also be a list of character sets, where every character set
will be set for.

FONT is the font to be set.  It can be a `font-spec' object, or a
font name string.

This is a convenient method to set font for specific character
set (like CJK characters or symbols).  However, the fontset
system of Emacs is complicated, and not very straightforward.
Instead of playing with `font-spec', fontsets and frame
attributes, this function provides a simpler interface that just
does the job."
  (when (display-graphic-p)
    (let* (;; The fontset that we are going to manipulate
	   (fontset (face-attribute face :fontset frame))
	   ;; If the fontset is not specified
	   (unspecified-p (equal fontset 'unspecified)))
      ;; If the fontset is not specified, create a new one with a
      ;; programmatically generated name
      (when unspecified-p
	(setq fontset
	      (new-fontset
	       (format "-*-*-*-*-*--*-*-*-*-*-*-fontset-zy%d"
		       zy/-fontset-cnt)
	       nil)
	      zy/-fontset-cnt (+ 1 zy/-fontset-cnt)))
      ;; Set font for the fontset
      (if (listp charset)
	  (mapc (lambda (c)
		  (set-fontset-font fontset c font frame))
		charset)
	(set-fontset-font fontset charset font frame))
      ;; Assign the fontset to the face if necessary
      (when unspecified-p
	(set-face-attribute face frame :fontset fontset)))))

(defconst zy/cjk-charsets '(han cjk-misc bopomofo kana hangul)
  "CJK character sets.")

;; Font faces setup

(defcustom zy/font-size 18
  "The pixel size of font in `default' face."
  :type 'integer
  :group 'zyemacs)

(defface zy-sans nil
  "Sans-serif font face."
  :group 'zyemacs)

;; I used to write very flexible font configuration codes that defines a tons of
;; faces and automatically picks the first available font from a list, but that
;; turned out to be too complicated and heavy.  Now I just hard-coded the font
;; names and rely on the default font fallback mechanism.

;; Anyway this is just my personal configuration, I can change the code at any
;; time.

(defun zy/setup-font-faces ()
  "Setup font for several faces."
  (interactive)
  (when (display-graphic-p)
    ;; Default face
    (set-face-attribute 'default nil
			:font (font-spec :family "Sarasa Mono CL"
					 :size zy/font-size))
    (zy/set-face-charset-font 'default nil zy/cjk-charsets "Sarasa Mono CL")
    ;; Fixed-pitch face
    (set-face-attribute 'fixed-pitch nil :font "Sarasa Mono CL"
			:height 'unspecified)
    (zy/set-face-charset-font 'fixed-pitch nil zy/cjk-charsets "Sarasa Mono CL")
    ;; ZyEmacs sans-serif face
    (set-face-attribute 'zy-sans nil :font "Roboto")
    (zy/set-face-charset-font 'zy-sans nil zy/cjk-charsets "Sarasa Mono CL")))

;; Setup font now.  Do not set it up after init to fake init time.  In daemon
;; mode this will not work, and requires the user to run `zy/setup-font-faces'
;; manually, but I do not use daemon mode, thus I don't care.

(zy/setup-font-faces)


;;;; Distraction-Free Mode

(straight-use-package 'darkroom)

(zy/incload-register 'darkroom)

(zy/define-key
  :keymap 'zy/leader-toggle-map
  "d" '("Darkroom" . darkroom-tentative-mode))

(with-eval-after-load 'darkroom
  (add-hook 'darkroom-tentative-mode-hook
	    (lambda ()
	      (display-line-numbers-mode 'toggle)
	      (hl-line-mode 'toggle))))


;;;; VS Code icons

(straight-use-package 'vscode-icon)


(provide 'init-ui)

;;; init-ui.el ends here.
