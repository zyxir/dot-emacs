# -*- org-edit-src-content-indentation: 0; -*-
#+TITLE: Zyxir's Emacs Configuration
#+STARTUP: content

* Introduction

** Todos

- [X] Gradually replace everything with ~use-package~ for better startup performance.
- [ ] Replace auctex with a LaTeX language server.
- [X] Use LSP as a company backend.
- [ ] +Use org-sidebar for easier org-mode navigation.+
- [X] Integrate window numbering to the system.
- [X] Rename all "my" symbol names with "zy".

** Installation Steps

These steps is **for myself only**. You may adapt my config, but it is never
recommended to use it directly.

1. Init and update all submodules.
2. Make sure ~msys2~ or ~mingw~ is installed on Windows, as a C compiler is
   required to compile some functionalities.
3. Write own =custom.el= based on =example-custom.el=. Make sure your configured
   font is installed on your system.
4. On Windows, add =./3rd-party/im-select/im-select.exe= to path, to enable
  smart input source support.
5. Run =M-x all-the-icons-install-fonts= for icon support.
6. Other small functionalities:
   - Install ~opencc~ for Chinese conversion support.

** (Chinese) 配置介紹

這是我的 Emacs 配置。我主要使用 Emacs 來進行個人知識管理、待辦事項管理、簡單文檔
撰寫、輕度代碼編輯。

高手的配置通常是以代碼項目的形式管理的（例如 Purcell 的配置，Doom Emacs，Centuar
Emacs 等等）。但對我個人而言，我更喜歡方便編輯與查看的 literate programming 形式。
我的配置的每一行代碼，都是以 source block 的形式存放在這個 org 文件中的，而標準
配置文件 ~init.el~ 的作用，就是讀取與執行本 org 文件中的每塊 source block。使用
這種配置方法的人也有很多，而其中最知名的應該就是 Sacha Chua 了。

明明有 Evernote、Notion 等用戶體驗良好的商用工具，爲什么還要將 Emacs 用於個人知
識管理、文檔撰寫等用途？事實上，我本人非常喜歡 Notion，並且曾經用了它很長時間；
那麼使用 Emacs 而不用 Notion 的原因，我想可以用 Carsten Dominik 於 2008 年在
Google Tech Talks 上講的一段話來概括：

#+begin_quote
“Text files are the only truly portable format for files, so we can write things
down and read it anywhere, read it on a small device, read it on a big device,
on any computer, Linux, Windows, on a Macintosh, whatever. You can read it truly
anywhere, that data will never get lost. So, 20 years from now, you will still
be able to read these files, which you wrote.”。
#+end_quote

[[file:documents/20210930-next-iteration-plan.org][Next Iteration Plan]]

* Emacs Configuration

The configuration is divided into these categories:

- General :: General software-wide configuration.
- Information :: Gathering information about the system, the user,
  etc..
- Text Editor :: Settings about text editing.
- Workbench :: Visual UI settings.
- Window :: Settings about windows and frames.
- Feature :: Specific features like version control and project
  management.
- Extensions :: Settings for specific file name extensions, like
  ~.py~.

** Feature
*** Org-Roam

Org-roam is a tool for network thought. I decided to try it on
<2021-03-15 Mon>.

**** Installation

Above all, install it, along with org-roam-ui, which visualize notes. It is
worth noticing that I upgrade org-roam from v1 to v2 at [2021-08-30 Mon].

#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
(require 'org-roam)
(use-package org-roam
  :requires org-roam
  :config
  (setq org-roam-directory (concat zy/zybox-path "org-roam"))
  (unless (file-exists-p org-roam-directory)
    (make-directory org-roam-directory))
  (org-roam-setup))
#+end_src

**** Shortcuts

Define a series of shortcuts for org-roam. "z" for Zettelkasten.

#+begin_src emacs-lisp
(define-prefix-command 'zy/org-roam-map)
(general-define-key
 "C-c z" 'zy/org-roam-map)

(general-define-key
 :keymaps 'zy/org-roam-map
 "c" 'org-roam-capture
 "f" 'org-roam-node-find
 "i" 'org-roam-node-insert
 "t" 'org-roam-buffer-toggle)
#+end_src

**** UI with =org-roam-ui=

Org-Roam-UI, in place of Org-Roam-Server for v1, is a frontend for exploring and
interacting with org-roam notes for Org-Roam v2.

However, it's not yet on MELPA, so I added it as a submodule, and had to install
its dependencies manually.

#+begin_src emacs-lisp
(use-package org-roam-ui
  :load-path "site-lisp/org-roam-ui"
  :requires (websocket simple-httpd))
#+end_src

**** Exclude Org-Roam from Recentf

#+begin_src emacs-lisp
(use-package recentf
  :ensure nil
  :config
  (with-eval-after-load "org-roam"
    (add-to-list 'recentf-exclude
		 org-roam-directory)))
#+end_src
