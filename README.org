#+TITLE: Zyxir's Emacs Configuration
#+STARTUP: content

* Emacs Configuration

This is my personal Emacs configuration, made out of the concept of
literate programming.

As configuration of all aspects is inside this file, I divide them
into several categories:

- General :: General software-wide configuration.
- Information :: Gathering information about the system, the user,
  etc..
- Text Editor :: Settings about text editing.
- Workbench :: Visual UI settings.
- Window :: Settings about windows and frames.
- Feature :: Specific features like version control and project
  management.
- Extensions :: Settings for specific file name extensions, like
  ~.py~.

** General

*** Load Path

Add load path for third-party elisp scripts.

#+begin_src emacs-lisp
  (let ((default-directory (concat user-emacs-directory "site-lisp/")))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

*** Package Manager

Use Purcell's ~require-package~ function for package management. It's
efficient and effective.

#+begin_src emacs-lisp
  (require 'package)
  (require 'cl-lib)

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))

  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (or (package-installed-p package min-version)
	(let* ((known (cdr (assoc package package-archive-contents)))
	       (best (car (sort known (lambda (a b)
					(version-list-<= (package-desc-version b)
							 (package-desc-version a)))))))
	  (if (and best (version-list-<= min-version (package-desc-version best)))
	      (package-install best)
	    (if no-refresh
		(error "No version of %s >= %S is available" package min-version)
	      (package-refresh-contents)
	      (require-package package min-version t)))
	  (package-installed-p package min-version))))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

*** Encoding and Locale

Use ISO C date format everywhere.

#+begin_src emacs-lisp
  (setq system-time-locale "C")
#+end_src

*** Completion Framework

Use the simple ivy, and extend some commands with counsel.

#+begin_src emacs-lisp
  (require-package 'ivy)
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

  (require-package 'counsel)
  (counsel-mode)
#+end_src

*** Bug Fix

Hide this kind of warning:

#+begin_quote
ad-handle-definition: 'text-scale-increase' got redefined.
#+end_quote

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src

** Information

*** Personal Information

Information about the user.

#+begin_src emacs-lisp
  (setq user-full-name "Eric Zhuo Chen"
	user-mail-address "zyxirchen@outlook.com")
#+end_src

*** File Locations

The location of several important files and directories. Note that the
location of Zybox is left empty here.

#+begin_src emacs-lisp
  (defvar my/emacs-config-file (concat user-emacs-directory
				       "README.org")
    "The main Emacs configuration file.")
  (defvar my/zybox-path ""
    "The path of Zybox, the base of all my files.")
  (defvar my/projects-relapath "projects/"
    "The path of the projects directory relative to Zybox.")
#+end_src

These locations varies across my devices, so Emacs should reads an
external file named ~custom.el~, to get the accurate location. The
location of Zybox should be set there. Emacs itself will also mess up
with the custom file.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

Construct absolute paths and other file locations.

#+begin_src emacs-lisp
  ;; Fix `my/zybox-path` if it is incorrect.
  (setq my/zybox-path (file-name-as-directory my/zybox-path))

  (defvar my/projects-path (concat my/zybox-path my/projects-relapath)
    "The path of the projects directory.")
#+end_src

** Text Editor

*** Files

Always save cursor position.

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

A better backup and auto save configuration.

#+begin_src emacs-lisp
  (defvar my/backup-directory (concat user-emacs-directory
				      "backups")
    "The location of backups.")
  (unless (file-exists-p my/backup-directory)
    (make-directory my/backup-directory t))
  (setq backup-directory-alist `(("." . ,my/backup-directory)))
  (setq make-backup-files t
	vc-make-backup-files t
	backup-by-copying t
	version-control t
	delete-old-versions t
	delete-by-moving-to-trash t
	kept-old-versions 0
	kept-new-versions 10
	auto-save-default t
	auto-save-timeout 20
	auto-save-interval 200
	)
#+end_src

*** Format

Always show trailing whitespace.

#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
#+end_src

Set default fill column to 80.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src

*** Location

Show side line numbers and column number while coding.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
	    (lambda ()
	      (display-line-numbers-mode 1)))
  (column-number-mode 1)
#+end_src

** Workbench

*** Startup

Inhibit startup screen.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** Appearances

Font and color theme.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Sarasa Mono CL 11")
  (set-frame-font "Sarasa Mono CL 11")
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
		      (font-spec :family "Sarasa Mono CL")))

  (require-package 'solaire-mode)
  (solaire-global-mode +1)
  (require-package 'doom-themes)
  (load-theme 'doom-one-light t)
#+end_src

Disable unnecessary UI elements.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

*** Modeline

**** Hide Minor Modes

There are so many minor modes displayed on the mode line, which should
be diminished.

#+begin_src emacs-lisp
  (require-package 'diminish)
  (add-hook 'after-init-hook
	    (lambda ()
	      (diminish 'counsel-mode)
	      (diminish 'ivy-mode)
	      (diminish 'org-roam-mode)
	      (diminish 'projectile-mode)
	      (diminish 'which-key-mode)))
#+end_src

*** Minibuffer

I want to use smex to enhance my =M-x=, while still having the ivy
interface for a consistent UI. So I add Purcell's ivy-smex as a
submodule.

#+begin_src emacs-lisp
  (require 'ivy-smex)
  (global-set-key (kbd "M-x") 'ivy-smex)
#+end_src

*** Which-key

Which-key displays the key bindings following your currently entered
incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
  (require-package 'which-key)
  (which-key-setup-side-window-bottom)
  (which-key-mode)
#+end_src

** Window

*** Frame Behavior

If running with GUI, adjust the frame.

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq initial-frame-alist
	  '((width . 110)
	    (height . 40)))
    (setq default-frame-alist initial-frame-alist))
#+end_src

** Feature

*** Emojis

Install emojify to display emojis.

#+begin_src emacs-lisp
  (require-package 'emojify)

  (setq emojify-emoji-styles '(github))
  (global-emojify-mode +1)
#+end_src

*** Git

Magit is a complete text-based user interface to Git.

#+begin_src emacs-lisp
  (require-package 'magit)
#+end_src

*** Org-Roam

Org-roam is a tool for network thought. I decided to try it on
<2021-03-15 Mon>.

**** Installation

Above all, install it.

#+begin_src emacs-lisp
  (require-package 'org)
  (require-package 'org-roam)
#+end_src

Warn if ~sqlite3~ is not located on ~exec-path~.

#+begin_src emacs-lisp
  (unless (executable-find "sqlite3")
    (message "To make org-roam work, you have to install sqlite3"))
#+end_src

Set the org-roam directory, and enable it by default.

#+begin_src emacs-lisp
  (setq org-roam-directory (concat my/zybox-path "org-roam"))
  (unless (file-exists-p org-roam-directory)
    (make-directory org-roam-directory))
  (org-roam-mode)
#+end_src

**** Daily Notes

Use org-roam to write daily notes, a.k.a. journals.

#+begin_src emacs-lisp
  (setq org-roam-dailies-directory "daily")

  (setq org-roam-dailies-capture-templates
	'(("d" "default" entry
	   #'org-roam-capture--get-point
	   "* %?"
	   :file-name "daily/%<%Y-%m-%d>"
	   :head "#+title: %<%Y-%m-%d>\n\n")))
#+end_src

**** Shortcuts

Define a series of shortcuts for org-roam. "z" for Zettelkasten.

#+begin_src emacs-lisp
  (define-prefix-command 'my/org-roam-map)
  (global-set-key (kbd "C-c z") 'my/org-roam-map)

  (define-key 'my/org-roam-map (kbd "b") 'org-roam-db-build-cache)
  (define-key 'my/org-roam-map (kbd "d") 'org-roam-dailies-find-date)
  (define-key 'my/org-roam-map (kbd "f") 'org-roam-find-file)
  (define-key 'my/org-roam-map (kbd "i") 'org-roam-insert)
  (define-key 'my/org-roam-map (kbd "t") 'org-roam-buffer-toggle-display)
#+end_src

*** Project Management

Manage projects with projectile, and use =C-x p= as the shortcut.

#+begin_src emacs-lisp
  (require-package 'projectile)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
#+end_src

**** Search Path

Default search for projects in the user defined projects path.

#+begin_src emacs-lisp
  (setq projectile-project-search-path `(,my/projects-path))
#+end_src

*** Quick Access

I want to reach several important files quickly with shortcuts.

#+begin_src emacs-lisp
  (define-prefix-command 'my/quick-access-map)
  (global-set-key (kbd "C-c o") 'my/quick-access-map)

  (defun my/quick-access-zybox ()
    (interactive)
    (find-file my/zybox-path))
  (define-key 'my/quick-access-map (kbd "z") 'my/quick-access-zybox)

  (defun my/quick-access-emacs-config ()
    (interactive)
    (find-file my/emacs-config-file))
  (define-key 'my/quick-access-map (kbd "e") 'my/quick-access-emacs-config)

  (defun my/quick-access-projects ()
    (interactive)
    (find-file my/projects-path))
  (define-key 'my/quick-access-map (kbd "p") 'my/quick-access-projects)
#+end_src

** Extensions

*** Org ~.org~

**** Attachments

Put attachments in an obvious directory.

#+begin_src emacs-lisp
  (setq org-attach-id-dir "org-attachments/")
#+end_src

**** Bullets

Show org-mode bullets as UTF-8 characters.

#+begin_src emacs-lisp
  (require-package 'org-bullets)
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

**** Editing Features

Enable auto fill, and fill to the 80th character.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (auto-fill-mode +1)))
#+end_src

**** Insert Image

Org-download facilitates moving images from filesystem, clipboard, or
web pages, into an org-mode buffer.

#+begin_src emacs-lisp
  (require-package 'org-download)
  (require 'org-download)
  (add-hook 'dired-mode-hook 'org-download-enable)

  ;; By default, add image as attachment.
  (setq org-download-method 'attach)
#+end_src

*** MATLAB ~.m~

#+begin_src emacs-lisp
  (require-package 'matlab-mode)
  (add-hook 'matlab-mode-hook 'auto-fill-mode) 
#+end_src
