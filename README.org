#+TITLE: Zyxir's Emacs Configuration
#+STARTUP: content

* Introduction

這是我的 Emacs 配置。我主要使用 Emacs 來進行個人知識管理、待辦事項管理、簡單文檔
撰寫、輕度代碼編輯（我想逐步把 Emacs 打造成我的主力編輯器，但目前還是主要使用
Visual Studio Code）。

高手的配置通常是以代碼項目的形式管理的（例如 Purcell 的配置，Doom Emacs，Centuar
Emacs 等等）。但對我個人而言，我更喜歡方便編輯與查看的 literate programming 形式。
我的配置的每一行代碼，都是以 source block 的形式存放在這個 org 文件中的，而標準
配置文件 ~init.el~ 的作用，就是讀取與執行本 org 文件中的每塊 source block。使用
這種配置方法的人也有很多，而其中最知名的應該就是 Sacha Chua 了。

明明有 Evernote、Notion 等用戶體驗良好的商用工具，爲什么還要將 Emacs 用於個人知
識管理、文檔撰寫等用途？事實上，我本人非常喜歡 Notion，並且曾經用了它很長時間；
那麼使用 Emacs 而不用 Notion 的原因，我想可以用 Carsten Dominik 於 2008 年在
Google Tech Talks 上講的一段話來概括：

#+begin_quote
“Text files are the only truly portable format for files, so we can write things
down and read it anywhere, read it on a small device, read it on a big device,
on any computer, Linux, Windows, on a Macintosh, whatever. You can read it truly
anywhere, that data will never get lost. So, 20 years from now, you will still
be able to read these files, which you wrote.”。
#+end_quote

* Emacs Configuration

The configuration is divided into these categories:

- General :: General software-wide configuration.
- Information :: Gathering information about the system, the user,
  etc..
- Text Editor :: Settings about text editing.
- Workbench :: Visual UI settings.
- Window :: Settings about windows and frames.
- Feature :: Specific features like version control and project
  management.
- Extensions :: Settings for specific file name extensions, like
  ~.py~.

**Installation Steps:**

1. Init and update all submodules.
2. Make sure ~sqlite3~ is installed in path.
3. Optionally, install ~opencc~ for Chinese conversion support.

** General

*** Load Path

Add load path for third-party elisp scripts.

#+begin_src emacs-lisp
  (let ((default-directory (concat user-emacs-directory "site-lisp/")))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

*** Package Manager

Use Purcell's ~require-package~ function for package management. It's
efficient and effective.

#+begin_src emacs-lisp
  (require 'package)
  (require 'cl-lib)

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))

  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (or (package-installed-p package min-version)
	(let* ((known (cdr (assoc package package-archive-contents)))
	       (best (car (sort known (lambda (a b)
					(version-list-<= (package-desc-version b)
							 (package-desc-version a)))))))
	  (if (and best (version-list-<= min-version (package-desc-version best)))
	      (package-install best)
	    (if no-refresh
		(error "No version of %s >= %S is available" package min-version)
	      (package-refresh-contents)
	      (require-package package min-version t)))
	  (package-installed-p package min-version))))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

*** Encoding and Locale

Use ISO C date format everywhere.

#+begin_src emacs-lisp
  (setq system-time-locale "C")
#+end_src

*** Completion Framework

Use the simple ivy, and extend some commands with counsel.

#+begin_src emacs-lisp
  (require-package 'ivy)
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

  (require-package 'counsel)
  (counsel-mode)
#+end_src

*** Key Binding

Use ~general.el~ for key bindings.

#+begin_src emacs-lisp
  (require-package 'general)
#+end_src

*** Bug Fix

Hide this kind of warning:

#+begin_quote
ad-handle-definition: 'text-scale-increase' got redefined.
#+end_quote

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src

** Information

*** Personal Information

Information about the user.

#+begin_src emacs-lisp
  (setq user-full-name "Eric Zhuo Chen"
	user-mail-address "zyxirchen@outlook.com")
#+end_src

*** File Locations

The location of several important files and directories. Note that the
location of Zybox is left empty here.

#+begin_src emacs-lisp
  (defvar my/emacs-config-file (concat user-emacs-directory
				       "README.org")
    "The main Emacs configuration file.")
  (defvar my/3rd-party-relapath "3rd-party/"
    "The path of 3rd-party tools relative to the user Emacs directory.")
  (defvar my/zybox-path ""
    "The path of Zybox, the base of all my files.")
  (defvar my/projects-relapath "projects/"
    "The path of the projects directory relative to Zybox.")
#+end_src

These locations varies across my devices, so Emacs should reads an
external file named ~custom.el~, to get the accurate location. The
location of Zybox should be set there. Emacs itself will also mess up
with the custom file.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

Construct absolute paths and other file locations.

#+begin_src emacs-lisp
  ;; Fix `my/zybox-path` if it is incorrect.
  (setq my/zybox-path (file-name-as-directory my/zybox-path))

  (defvar my/3rd-party-path (concat user-emacs-directory my/3rd-party-relapath)
    "The path of 3rd-party tools.")
  (defvar my/projects-path (concat my/zybox-path my/projects-relapath)
    "The path of the projects directory.")
#+end_src

** Text Editor

*** Completion

Install company completion framework. Manually complete with =C-M-i=, which is
originally ~complete-at-point~. In some modes, like matlab-mode, this key would
be overwritten.

#+begin_src emacs-lisp
  (require-package 'company)
  (global-company-mode +1)
  (general-define-key "C-M-i" 'company-complete)
#+end_src

*** Encoding

Encoding is a pain, especially on Microsoft Windows. I don't care how Windows
programs work, I just want everything in UTF-8.

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
#+end_src

*** Files

**** Cursor Position

Always save cursor position.

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

**** Backup

A better backup and auto save configuration.

#+begin_src emacs-lisp
  (defvar my/backup-directory (concat user-emacs-directory
				      "backups")
    "The location of backups.")
  (unless (file-exists-p my/backup-directory)
    (make-directory my/backup-directory t))
  (setq backup-directory-alist `(("." . ,my/backup-directory)))
  (setq make-backup-files t
	vc-make-backup-files t
	backup-by-copying t
	version-control t
	delete-old-versions t
	delete-by-moving-to-trash t
	kept-old-versions 0
	kept-new-versions 10
	auto-save-default t
	auto-save-timeout 20
	auto-save-interval 200
	)
#+end_src

**** File Manipulation

Function to delete the current buffer and file at the same time. This is from
[[https://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/][Delete File and Buffer | Emacs Redux]].

#+begin_src emacs-lisp
  (defun my/delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
	(if (vc-backend filename)
	    (vc-delete-file filename)
	  (progn
	    (delete-file filename)
	    (message "Delete file %s" filename)
	    (kill-buffer))))))
#+end_src

**** Recent Files

Make use of =recentf.el=.

#+begin_src emacs-lisp
  (require 'recentf)
  (setq recentf-max-saved-items 200
	recentf-max-menu-items 15)
  (recentf-mode)
#+end_src

Open recent files with =C-x r=

#+begin_src emacs-lisp
  (general-define-key "C-x r" 'counsel-recentf)
#+end_src

*** Format

Always show trailing whitespace.

#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (general-define-key "C-c SPC" 'delete-trailing-whitespace)
#+end_src

Do not show trailing whitespace in some modes.

#+begin_src emacs-lisp
  (defun my/turn-off-trailing-whitespace ()
    (setq-local show-trailing-whitespace nil))

  (add-hook 'calendar-mode-hook #'my/turn-off-trailing-whitespace)
  (add-hook 'help-mode-hook #'my/turn-off-trailing-whitespace)
#+end_src

Set default fill column to 80.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src

*** Location

Show side line numbers and column number while coding.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
	    (lambda ()
	      (display-line-numbers-mode 1)))
  (column-number-mode 1)
#+end_src

*** Parenthesis

Indicate matching parenthesis.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

*** Search

Replace isearch with swiper.

#+begin_src emacs-lisp
  (require-package 'swiper)
  (general-define-key "C-s" 'swiper)
#+end_src

Enable character folding (having =bar= matching =bár=) for swiper.

#+begin_src emacs-lisp
  (setq search-default-mode #'char-fold-to-regexp)
#+end_src

** Workbench

*** Startup

Inhibit startup screen.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** Appearances

Font and color theme.

#+begin_src emacs-lisp
  (defvar my/main-font-name "Sarasa Mono CL"
    "Main font name for the whole program.")
  (defvar my/main-font-size 11
    "The default size for the main font.")
  (setq my/main-font-full (concat my/main-font-name " "
			       (number-to-string my/main-font-size)))

  (when (display-graphic-p)
    (set-face-attribute 'default nil :font my/main-font-full)
    (set-frame-font my/main-font-full)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font) charset
			(font-spec :family my/main-font-name)))

    (require-package 'solaire-mode)
    (solaire-global-mode +1)
    (require-package 'doom-themes)
    (load-theme 'doom-one-light t))
#+end_src

Disable unnecessary UI elements.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

*** Modeline

**** Hide Minor Modes

There are so many minor modes displayed on the mode line, which should
be diminished.

#+begin_src emacs-lisp
  (require-package 'diminish)
  (add-hook 'after-init-hook
	    (lambda ()
	      (diminish 'company-mode)
	      (diminish 'counsel-mode)
	      (diminish 'ivy-mode)
	      (diminish 'org-roam-mode)
	      (diminish 'projectile-mode)
	      (diminish 'which-key-mode)))
#+end_src

*** Minibuffer

I want to use smex to enhance my =M-x=, while still having the ivy
interface for a consistent UI. So I add Purcell's ivy-smex as a
submodule.

#+begin_src emacs-lisp
  (require-package 'smex)
  (require 'ivy-smex)
  (global-set-key (kbd "M-x") 'ivy-smex)
#+end_src

*** Which-key

Which-key displays the key bindings following your currently entered
incomplete command (a prefix) in a popup.

#+begin_src emacs-lisp
  (require-package 'which-key)
  (which-key-setup-side-window-bottom)
  (which-key-mode)
#+end_src

** Window

*** Frame Behavior

If running with GUI, adjust the frame.

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq initial-frame-alist
	  '((width . 110)
	    (height . 40)))
    (setq default-frame-alist initial-frame-alist))
#+end_src

** Extensions

*** MATLAB ~.m~

The old but useful MATLAB mode.

#+begin_src emacs-lisp
  (require-package 'matlab-mode)
  (add-hook 'matlab-mode-hook 'auto-fill-mode)
#+end_src

However, my line number configuration doesn't work on matlab-mode, so it
requires extra configuration.

#+begin_src emacs-lisp
  (add-hook 'matlab-mode-hook
	    (lambda ()
	      (display-line-numbers-mode 1)))
#+end_src

*** Org ~.org~

**** Markup

Allow Chinese around markups. This comes from [[https://emacs-china.org/t/org-mode/597/4][Emacs China : Org-mode 中文行内格
式化的问题]], may not be stable.

#+begin_src emacs-lisp
  (setq org-emphasis-regexp-components
	;; markup 记号前后允许中文
	(list (concat " \t('\"{"            "[:nonascii:]")
	      (concat "- \t.,:!?;'\")}\\["  "[:nonascii:]")
	      " \t\r\n,\"'"
	      "."
	      1))
#+end_src

Hide emphasis markups.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

**** Attachments

Put attachments in an obvious directory.

#+begin_src emacs-lisp
  (setq org-attach-id-dir "org-attachments/")
#+end_src

**** Bullets

Show org-mode bullets as UTF-8 characters.

#+begin_src emacs-lisp
  (require-package 'org-bullets)
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

Render bullets ("•" and "◦") instead of dashes in bulleted lists.

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([+]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
#+end_src

**** Capture

Utilize the ~org-capture~ mechanism.

#+begin_src emacs-lisp
  (general-define-key "<f5>" 'org-capture)
#+end_src

**** Editing Features

Enable auto fill, and fill to the 80th character.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (auto-fill-mode +1)))
#+end_src

Disable =C-c C-i=, which I always mispress.

#+begin_src emacs-lisp
  (eval-after-load 'org
    (progn
      (general-define-key :keymaps 'org-mode-map "C-c C-i" nil)))
#+end_src

**** Export to HTML

For Chinese users: 去除由于 =fill-paragraph= 導致的多餘空格。

#+begin_src emacs-lisp
  (defadvice org-html-paragraph (before org-html-paragraph-advice
					(paragraph contents info) activate)
    "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to HTML."
    (let* ((origin-contents (ad-get-arg 1))
	   (fix-regexp "[[:multibyte:]]")
	   (fixed-contents
	    (replace-regexp-in-string
	     (concat
	      "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" origin-contents)))
      (ad-set-arg 1 fixed-contents)))
#+end_src

**** Insert Image

Org-download facilitates moving images from filesystem, clipboard, or
web pages, into an org-mode buffer.

#+begin_src emacs-lisp
  (require-package 'org-download)
  (require 'org-download)
  (add-hook 'dired-mode-hook 'org-download-enable)

  ;; By default, download images to a dedicated folder.
  (setq org-download-image-dir "images")
#+end_src

*** PlantUML

Install =plantuml-mode=.

#+begin_src emacs-lisp
  (require-package 'plantuml-mode)
#+end_src

Use executable inside Emacs config directory.

#+begin_src emacs-lisp
  (setq plantuml-jar-path (concat my/3rd-party-path "plantuml/plantuml.jar")
	plantuml-default-exec-mode 'jar)
#+end_src

*** Python ~.py~

Install Elpy, the Emacs Python IDE.

#+begin_src emacs-lisp
  (require-package 'elpy)
#+end_src

** Feature

*** Chinese Conversion

Conversion between simplified/traditional Chinese with =opencc.el=. 使用
=opencc.el=進行中文簡繁轉換。

#+begin_src emacs-lisp
  (require 'opencc)
  (general-define-key "C-c c" 'opencc-replace-at-point)
#+end_src

=opencc.el= is based on OpenCC:

#+begin_quote
Open Chinese Convert (OpenCC, 開放中文轉換) is an opensource project for
conversions between Traditional Chinese, Simplified Chinese and Japanese Kanji
(Shinjitai). It supports character-level and phrase-level conversion, character
variant conversion and regional idioms among Mainland China, Taiwan and Hong
Kong. This is not translation tool between Mandarin and Cantonese, etc.
#+end_quote

在 Windows 下，需要一些特殊的措施來使 OpenCC 得以正常運行。詳見[[file:documents/opencc-windows-conf.org][在 Windows 下使用 opencc.el]]。

*** Emojis

Install emojify to display emojis.

#+begin_src emacs-lisp
  (require-package 'emojify)

  (setq emojify-emoji-styles '(github))
  (global-emojify-mode +1)
  (general-define-key "C-c e" 'emojify-insert-emoji)
#+end_src

*** Git

Magit is a complete text-based user interface to Git.

#+begin_src emacs-lisp
  (require-package 'magit)
#+end_src

*** Lorem Ipsum Generator

Use a package to generate dummy Latin text into a buffer.

#+begin_src emacs-lisp
  (require-package 'lorem-ipsum)
#+end_src

Use ~lorem-ipsum-insert-paragraphs~, ~lorem-ipsum-insert-sentences~, and
~lorem-ipsum-insert-list~.

*** Org-Journal

Org-journal is a tool to keep journals. I decided to try it on <2021-06-02 Wed>.

#+begin_src emacs-lisp
  (require-package 'org-journal)
#+end_src

Set the journal directory as ~Zybox/org-journal~.

#+begin_src emacs-lisp
  (setq org-journal-dir (concat my/zybox-path "org-journal"))
  (unless (file-exists-p org-journal-dir)
    (make-directory org-journal-dir))
#+end_src

Set shortcuts and templates.

#+begin_src emacs-lisp
  (general-define-key "C-c j" 'org-journal-new-entry)
  (setq org-journal-file-format "%F"
	org-journal-date-format "%F %a W%V\n"
	org-journal-date-prefix "#+TITLE: "
	org-journal-time-format "%R "
	org-journal-time-format-post-midnight "%R (midnight) "
	org-journal-time-prefix "\n* "
	org-journal-file-header "")
#+end_src

If it is early than 3 a.m., it is still yesterday.

#+begin_src emacs-lisp
  (setq org-extend-today-until 3)
#+end_src

*** Org-Roam

Org-roam is a tool for network thought. I decided to try it on
<2021-03-15 Mon>.

**** Installation

Above all, install it, along with org-roam-server, which visualize notes.

#+begin_src emacs-lisp
  (require-package 'org)
  (require-package 'org-roam)
  (require-package 'org-roam-server)
#+end_src

Warn if ~sqlite3~ is not located on ~exec-path~.

#+begin_src emacs-lisp
  (unless (executable-find "sqlite3")
    (message "To make org-roam work, you have to install sqlite3"))
#+end_src

Set the org-roam directory, and enable it by default.

#+begin_src emacs-lisp
  (setq org-roam-directory (concat my/zybox-path "org-roam"))
  (unless (file-exists-p org-roam-directory)
    (make-directory org-roam-directory))
  (org-roam-mode)
#+end_src

**** Shortcuts

Define a series of shortcuts for org-roam. "z" for Zettelkasten.

#+begin_src emacs-lisp
  (define-prefix-command 'my/org-roam-map)
  (general-define-key
   "C-c z" 'my/org-roam-map)

  (general-define-key
   :keymaps 'my/org-roam-map
   "b" 'org-roam-db-build-cache
   "d" 'org-roam-dailies-capture-today
   "f" 'org-roam-find-file
   "i" 'org-roam-insert
   "t" 'org-roam-buffer-toggle-display
   "s" 'org-roam-server-mode)
#+end_src

**** Interaction with =recentf=

Do not show org-roam files in recentf list.

#+begin_src emacs-lisp
  (add-to-list 'recentf-exclude
	       (concat org-roam-directory "/.*"))
#+end_src

*** Project Management

Manage projects with projectile, and use =C-c p= as the shortcut.

#+begin_src emacs-lisp
  (require-package 'projectile)
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

**** Search Path

Default search for projects in the user defined projects path.

#+begin_src emacs-lisp
  (setq projectile-project-search-path `(,my/projects-path))
#+end_src

*** Quick Access

I want to reach several important files quickly with shortcuts.

#+begin_src emacs-lisp
  (define-prefix-command 'my/quick-access-map)
  (general-define-key "C-c o" 'my/quick-access-map)

  (defun my/quick-access-zybox ()
    (interactive)
    (find-file my/zybox-path))

  (defun my/quick-access-emacs-config ()
    (interactive)
    (find-file my/emacs-config-file))

  (defun my/quick-access-projects ()
    (interactive)
    (find-file my/projects-path))

  (general-define-key
   :keymaps 'my/quick-access-map
   "z" 'my/quick-access-zybox
   "e" 'my/quick-access-emacs-config
   "p" 'my/quick-access-projects)
#+end_src

*** GTD

The aim is to implement a GTD system with org-mode.

**** Relevant Files

Define those relevant files.

#+begin_src emacs-lisp
  (defvar my/gtd-path
    (concat my/zybox-path "org-gtd/")
    "The path of my GTD system root.")

  (defvar my/gtd-inbox-path
    (concat my/gtd-path "inbox.org")
    "The path of `inbox.org' of my GTD system.")

  (defvar my/gtd-gtd-path
    (concat my/gtd-path "gtd.org")
    "The path of `gtd.org' of my GTD system.")

  (defvar my/gtd-someday-path
    (concat my/gtd-path "someday.org")
    "The path of `someday.org' of my GTD system.")
#+end_src

**** Todo States

Use more states for precise control.

#+begin_src emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t)"
		    "IN PROCESS(i)"
		    "POSTPONED(p)"
		    "|"
		    "DONE(d)")
	  (sequence "|"
		    "CANCELED(c)")))

  (setq org-todo-keyword-faces
	'(("TODO" . (:foreground "#B71C1C" :weight bold))
	  ("IN PROCESS" . (:foreground "#AED581" :weight bold))
	  ("POSTPONED" . (:foreground "#F57C00" :weight bold))
	  ("DONE" . (:foreground "#33691E" :weight bold))
	  ("CANCELED" . (:foreground "#757575" :weight bold))))
#+end_src

**** Capturing System

Capture entries via ~org-capture~.

#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
	       `("i" "inbox" entry
		 (file+headline ,my/gtd-inbox-path "inbox")
		 "* TODO [#B] %U %i%?"
		 :empty-lines 1))
  (add-to-list 'org-capture-templates
	       `("s" "someday" entry
		 (file+headline ,my/gtd-someday-path "someday")
		 "* TODO [#C] %U %i%?"
		 :empty-lines 1))
  (add-to-list 'org-capture-templates
	       `("g" "GTD" entry
		 (file+datetree ,my/gtd-gtd-path)
		 "* TODO [#B] %U %i%?"
		 :empty-lines 1))
#+end_src

**** Refile Mechanism

Use the ~org-refile~ mechanism to distribute inbox items.

#+begin_src emacs-lisp
  (add-to-list 'org-refile-targets `(,my/gtd-gtd-path :maxlevel . 3))
  (add-to-list 'org-refile-targets `(,my/gtd-someday-path :level . 1))
#+end_src

Additional function to refile entry to datetree.

#+begin_src emacs-lisp
  (defun my/org-read-datetree-date (d)
    (let ((dtmp (nthcdr 3 (parse-time-string d))))
      (list (cadr dtmp) (car dtmp) (caddr dtmp))))

  (defun my/org-refile-to-gtd-datetree (&optional bfn)
    (interactive)
    "Refile an entry into the datetree of `gtd.org'"
    (require 'org-datetree)
    (let* ((bfn (or bfn (find-file-noselect (expand-file-name my/gtd-gtd-path))))
	   (datetree-date (my/org-read-datetree-date (org-read-date t nil))))
      (org-refile nil nil (list nil (buffer-file-name bfn) nil
				(with-current-buffer bfn
				  (save-excursion
				    (org-datetree-find-date-create datetree-date)
				    (point)))))))
#+end_src

**** Agenda

Agenda is the way to display all my GTD entries.

#+begin_src emacs-lisp
  (setq org-agenda-files `(,my/gtd-inbox-path
			   ,my/gtd-gtd-path
			   ,my/gtd-someday-path))

  (general-define-key "<f6>" 'org-agenda)
#+end_src

* Todos

Functionalities to be added.

- Python scripting features
- org-reveal
- org-ref
- enhancements for GNU/Linux
