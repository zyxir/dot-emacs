#+title: Next Iteration Plan
#+startup: showeverything

最近，我發覺我的 Emacs 配置需要進行一次迭代了。

* 事情原委

雖說我曾經也反反覆覆、斷斷續續地用過很長時間的 Emacs 了，但是衹有這一次是真正能
自豪地稱自己爲一個 Emacser 了，因爲：

- 有一個經過深思熟慮、越寫越大、有自己特色且好用的配置 repo 了。以前總是不斷把
  repo 刪了重寫，導致一直更像是在玩，而不是在用 Emacs。
- 這個 Emacs 確實在日常的工作和學習中幫上了我許多，尤其是 org-roam 和 GTD 系統，
  給了我極大的幫助。

剛開始的時候，由於對 Emacs Lisp 還不熟，並且配置尚少，我使用 literate
programming 原則來管理我的配置，就像 Sacha Chua 做的那樣。這麼做在一開始非常好，
十分高效，易於管理，但是隨着配置越來越大，出現了以下問題：

- 配置越來越複雜，整个 org 文件有着越來越多的小標題，難以理清、管理。
- Emacs 啟動速度很慢，在 Windows 上要花 5 秒以上，在 Linux 上也要花接近 2 秒。
  即使我花了很長時間將整個配置用 use-package 優化了一遍，也收效甚微。不過，這倒
  是讓我成爲了 use-package 的忠誠粉絲。
- 要想 auto load 許多自定義配置代碼，就必須將它們放進對應的文件，用 use-package
  的 :command 關鍵詞來延遲加載它們。
- 配置的主體應該是代碼，要給每段代碼都寫一段介紹文字，是很奇怪的事情。有時候文
  字就是凑數的。
- 一些高級技巧，比如 early-init.el，必須用多個文件實現。

現再，我打算使用和 Purcell、陳斌等大神類似的方式，使用多個文件來實現我自己的配
置。當然，不同之處是，我會使用 use-package 來優化自己的配置，畢竟我的水平還比不
上他們呢。

* 新版計劃

新版配置將重新組織目錄結構，但是也將基於現在的代碼基礎。要實現的新功能有：

- 整套配置的 benchmarking
- 更简洁的 README.md，使用 GitHub 支持更好的 Markdown 格式
- 更靈活的字體設置（當前的並做不到中英文等寛）
- 基於 Language Server Protocol 的 LaTeX 编輯環境
- lsp 和 company 的集成
- Window numbering 功能
- Org-Mode
  + 集中、統一的 org-mode 配置
  + 正确的 org-mode 縮進
  + org-sidebar 支持
  + org-roam 之 2.0 版本的修复
