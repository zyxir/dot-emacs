#+title: init.org
#+property: header-args:elisp :tangle ~/.emacs.d/init.el

* Startup

** Early Init

See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]].

#+begin_src elisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*-
  (setq default-frame-alist
	'((width . 86)
	  (height . 40)))
  (setq
   frame-inhibit-implied-resize t
   package-enable-at-startup nil
   inhibit-startup-message t)
#+end_src

** Adjust GC

Prohibit GC at startup, and adjust the threshold thereafter.

#+begin_src elisp
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.5)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold (* 32 1024 1024)
		    gc-cons-percentage 0.1)))
#+end_src

** Constants

#+begin_src elisp
p  (defconst *win64* (eq system-type 'windows-nt)
    "If Emacs is run on Windows.")
  (defconst *linux* (or (eq system-type 'gnu/linux)
		      (eq system-type 'linux))
    "If Emacs is run on Linux.")
#+end_src

** Custom Settings

#+begin_src elisp
  (setq
   disabled-command-function nil
   fill-column 80
   frame-title-format '("" "emacs" " [%b]")
   system-time-locale "C")
#+end_src

** Load ~custom.el~

#+begin_src elisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Load libraries

#+begin_src elisp
  (require 'cl-lib)
  (require 'cl-extra)
#+end_src

** Lisp Path

#+begin_src elisp
  (let ((lisp-directories
	 '("lisp" "site-lisp")))
    (dolist (dir lisp-directories)
      (setq dir (expand-file-name dir user-emacs-directory))
      (when (file-directory-p dir)
	(let ((default-directory dir))
	  (normal-top-level-add-subdirs-to-load-path)))))
#+end_src

** User Paths

Zybox is the collection of my personal files.

#+begin_src elisp
  (defvar zy/zybox-path nil
    "The path of Zybox, the collection of all my files.

  This value should be manually set in custom.el, as it is
  different on different machines.")

  (defun zy:file-directory-ret (path)
    (when (file-directory-p path)
      path))

  (unless zy/zybox-path
    (let* ((zybox-possible-locs-win64
	    '("C:\\Zybox"
	      "C:\\Users\\zyxir\\Zybox"
	      "C:\\Users\\zyxir\\Documents\\Zybox"))
	   (zybox-possible-locs-linux
	    '("~/Zybox"
	      "~/Documents/Zybox"
	      "/mnt/c/Zybox"
	      "/mnt/c/Users/zyxir/Zybox"
	      "/mnt/c/Users/Documents/Zybox"))
	   (guessed-zybox-path
	    (cl-some
	     #'zy:file-directory-ret
	     (cond
	      (*win64* zybox-possible-locs-win64)
	      (*linux* zybox-possible-locs-linux)))))
      (if guessed-zybox-path
	  (progn
	    (setq zy/zybox-path guessed-zybox-path)
	    (lwarn 'zyemacs :warning "Zybox is auto-detected at %s." zy/zybox-path)
	    (customize-save-variable 'zy/zybox-path zy/zybox-path))
	(lwarn 'zyemacs :warning "Could not auto-detect Zybox."))))
#+end_src

* Utilities

** Straight

Install package with straight.

#+begin_src elisp
  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))
  (setq straight-vc-git-default-clone-depth 1)
#+end_src

** Setup.el

#+begin_src elisp
  (straight-use-package '(setup :type git :host github :repo "phikal/setup.el"))
  (require 'setup)
  (setup-define :pkg
    (lambda (recipe)
      `(unless (straight-use-package ',recipe)
	 ,(setup-quit)))
    :documentation
    "Install RECIPE with `straight-use-package'.
  This macro can be used as HEAD, and will replace itself with the
  first RECIPE's package."
    :repeatable t
    :shorthand (lambda (sexp)
		 (let ((recipe (cadr sexp)))
		   (if (consp recipe)
		       (car recipe)
		     recipe))))
  (setup-define :pkg-when
    (lambda (recipe condition)
      `(if ,condition
	   (straight-use-package ',recipe)
	 ,(setup-quit)))
    :documentation
    "Install RECIPE with `straight-use-package' when CONDITION is met.
  If CONDITION is false, stop evaluating the body.  This macro can
  be used as HEAD, and will replace itself with the RECIPE's
  package.  This macro is not repeatable."
    :repeatable nil
    :indent 1
    :shorthand (lambda (sexp)
		 (let ((recipe (cadr sexp)))
		   (if (consp recipe) (car recipe) recipe))))
#+end_src

** Which-Key

#+begin_src elisp
  (setup (:pkg which-key)
    (which-key-mode +1))
#+end_src

** General

Manage keybinding with general.el, and rebind some default keys. Additionally,
define ~M-m~ as my leader-key.

#+begin_src elisp
  (setup (:pkg general)
    (define-prefix-command 'zy/leader-map)
    (general-define-key "M-m" 'zy/leader-map
			"M-z" 'back-to-indentation))
#+end_src

** Emacs Server

#+begin_src elisp
  (server-start)
#+end_src

* UI

** Toggle UI Elements

#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode +1)
#+end_src

* Lingua

** Rime Input Method

#+begin_src elisp
  (setup (:pkg rime)
    (setq rime-user-data-dir (expand-file-name "rime" user-emacs-directory)
	  default-input-method "rime"
	  rime-show-candidate 'posframe))

  ;; Make the cursor orange when IM is active
  (defvar zy/im-cursor-color "Orange"
      "Default cursor color if an input method is active.")
  (defvar zy/default-cursor-color (frame-parameter nil 'cursor-color)
    "Default text cursor color.")
  (defun zy/change-cursor-color-on-im ()
    "Set cursor color depending IM state."
    (interactive)
    (set-cursor-color (if current-input-method
			  zy/im-cursor-color
			zy/default-cursor-color)))
  (add-hook 'post-command-hook 'zy/change-cursor-color-on-im)
#+end_src
