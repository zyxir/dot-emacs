#+TITLE: Zyxir's Emacs Configuration
#+STARTUP: content

* Emacs Configuration

This is my personal Emacs configuration, made out of the concept of
literate programming.

As configuration of all aspects is inside this file, I divide them
into several categories:

- General :: General software-wide configuration.
- Information :: Gathering information about the system, the user,
  etc..
- Text Editor :: Settings about text editing.
- Workbench :: Visual UI settings.
- Window :: Settings about windows and frames.
- Feature :: Specific features like version control and project
  management.
- Extensions :: Settings for specific file name extensions, like
  ~.py~.

** General

*** Package Manager

Install ~use-package~ for ease of package management.

#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
#+end_src

*** Encoding and Locale

Use ISO C date format everywhere.

#+begin_src emacs-lisp
  (setq system-time-locale "C")
#+end_src

*** Completion Framework

Use the simple ivy, and extend some commands with counsel.

#+begin_src emacs-lisp
  (package-install 'ivy)
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

  (package-install 'counsel)
  (counsel-mode)
#+end_src

** Information

*** Personal Information

Information about the user.

#+begin_src emacs-lisp
  (setq user-full-name "Eric Zhuo Chen"
	user-mail-address "zyxirchen@outlook.com")
#+end_src

*** File Locations

The location of several important files and directories. Note that the
location of Zybox is left empty here.

#+begin_src emacs-lisp
  (defvar my/emacs-config-file (concat user-emacs-directory
				       "init.org")
    "The main Emacs configuration file.")
  (defvar my/zybox-path ""
    "The path of Zybox, the base of all my files.")
  (defvar my/org-relapath "org/"
    "The path of the org directory relative to Zybox.")
  (defvar my/projects-relapath "projects/"
    "The path of the projects directory relative to Zybox.")
#+end_src

These locations varies across my devices, so Emacs should reads an
external file named ~custom.el~, to get the accurate location. The
location of Zybox should be set there. Emacs itself will also mess up
with the custom file.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

Construct absolute paths and other file locations.

#+begin_src emacs-lisp
  ;; Fix `my/zybox-path` if it is incorrect.
  (setq my/zybox-path (file-name-as-directory my/zybox-path))

  (defvar my/org-path (concat my/zybox-path my/org-relapath)
    "The path of the org directory.")
  (defvar my/org-carnet (concat my/org-path "carnet.org")
    "The path of the Carnet.")
  (defvar my/projects-path (concat my/zybox-path my/projects-relapath)
    "The path of the projects directory.")
#+end_src

** Text Editor

*** Files

Always save cursor position.

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

A better backup and auto save configuration.

#+begin_src emacs-lisp
  (defvar my/backup-directory (concat user-emacs-directory
				      "backups")
    "The location of backups.")
  (unless (file-exists-p my/backup-directory)
    (make-directory my/backup-directory t))
  (setq backup-directory-alist `(("." . ,my/backup-directory)))
  (setq make-backup-files t
	vc-make-backup-files t
	backup-by-copying t
	version-control t
	delete-old-versions t
	delete-by-moving-to-trash t
	kept-old-versions 0
	kept-new-versions 10
	auto-save-default t
	auto-save-timeout 20
	auto-save-interval 200
	)
#+end_src

** Workbench

*** Startup

Inhibit startup screen.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

*** Appearances

Font and color theme.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Sarasa Mono CL 11")
  (set-frame-font "Sarasa Mono CL 11")
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
		      (font-spec :family "Sarasa Mono CL")))

  (package-install 'solaire-mode)
  (solaire-global-mode +1)
  (package-install 'doom-themes)
  (load-theme 'doom-one t)
#+end_src

Disable unnecessary UI elements.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Window

*** Frame Behavior

If running with GUI, adjust the frame.

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq initial-frame-alist
	  '((width . 94)
	    (height . 36)))
    (setq default-frame-alist initial-frame-alist))
#+end_src

** Feature

*** Git

Magit is a complete text-based user interface to Git.

#+begin_src emacs-lisp
  (package-install 'magit)
#+end_src

*** Quick Access

I want to reach several important files quickly with shortcuts.

#+begin_src emacs-lisp
  (define-prefix-command 'my/quick-access-map)
  (global-set-key (kbd "C-c o") 'my/quick-access-map)

  (defun my/quick-access-zybox ()
    (interactive)
    (find-file my/zybox-path))
  (define-key 'my/quick-access-map (kbd "z") 'my/quick-access-zybox)

  (defun my/quick-access-emacs-config ()
    (interactive)
    (find-file my/emacs-config-file))
  (define-key 'my/quick-access-map (kbd "e") 'my/quick-access-emacs-config)

  (defun my/quick-access-org-dir ()
    (interactive)
    (find-file my/org-path))
  (define-key 'my/quick-access-map (kbd "o") 'my/quick-access-org-dir)

  (defun my/quick-access-carnet ()
    (interactive)
    (find-file my/org-carnet))
  (define-key 'my/quick-access-map (kbd "c") 'my/quick-access-carnet)
#+end_src

*** Org-Roam

Org-roam is a tool for network thought. I decided to try it on
<2021-03-15 Mon>.

Above all, install it.

#+begin_src emacs-lisp
  (package-install 'org)
  (package-install 'org-roam)
#+end_src

Warn if ~sqlite3~ is not located on ~exec-path~.

#+begin_src emacs-lisp
  (unless (executable-find "sqlite3")
    (message "To make org-roam work, you have to install sqlite3"))
#+end_src

Set the org-roam directory, and enable it by default.

#+begin_src emacs-lisp
  (setq org-roam-directory (concat my/zybox-path "org-roam"))
  (unless (file-exists-p org-roam-directory)
    (make-directory org-roam-directory))
  (org-roam-mode)
#+end_src

** Extensions

*** Org ~.org~

Enable auto fill, and fill to the 80th character.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (auto-fill-mode +1)))
  (setq-local fill-column 80)
#+end_src
